
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module zad3(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

reg rst,rst1,add,add1,sub,sub1;
reg [7:0] val,val1;
reg [15:0] accu;

wire c0,c1,c2,c3;
wire carr_add0,carry_add1,carry_add2;
wire carr_sub0,carry_sub1,carry_sub2;

wire [15:0] addv;
wire [15:0] subv;
reg add_edge,sub_edge;
reg ladd,lsub;
//=======================================================
//  Structural coding
//=======================================================

_1_BCD_adder 	a0(addv[0+:4],carr_add0,accu[0+:4],val[0+:4],1'b0),
					a1(addv[4+:4],carr_add1,accu[4+:4],val[4+:4],carr_add0),
					a2(addv[8+:4],carr_add2,accu[8+:4],,carr_add1),
					a3(addv[12+:4],,accu[12+:4],,carr_add2);

_1_BCD_substractor 	su0(subv[0+:4],carr_sub0,accu[0+:4],val[0+:4],1'b1),
					su1(subv[4+:4],carr_sub1,accu[4+:4],val[4+:4],carr_sub0),
					su2(subv[8+:4],carr_sub2,accu[8+:4],,carr_sub1),
					su3(subv[12+:4],,accu[12+:4],,carr_sub2);					
					
always @(posedge CLOCK_50) begin
	rst1 <= !KEY[0];
	add1 <= !KEY[1];
	sub1 <= !KEY[2];
	val1 <= SW[0+:8];
	val <= val1;
	rst <= rst1;
	add <= add1;
	sub <= sub1;
end

always @(posedge CLOCK_50) begin
	case ({ladd,add})
			2'b01: add_edge <= 1;
		default : add_edge <= 0;
	endcase;
	ladd <= add;
end

always @(posedge CLOCK_50) begin
	case ({lsub,sub})
			2'b01: sub_edge <= 1;
		default : sub_edge <= 0;
	endcase;
	lsub <= sub;
end

always @(posedge CLOCK_50 or posedge rst) begin
	if (rst) accu <= 0;
	else if (add_edge) begin
		accu <= addv; 
	end
	else if (sub_edge)begin
		accu <= subv;
	end
end

BCD_to_HEX_screen s0(HEX0,SW[0+:4]),s1(HEX1,SW[4+:4]),s2(HEX2,accu[0+:4]),s3(HEX3,accu[4+:4]),s4(HEX4,accu[8+:4]),s5(HEX5,accu[12+:4]);

endmodule
