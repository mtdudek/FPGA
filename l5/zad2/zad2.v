
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module zad2(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [15:0] top_val,inner;
wire _add,_mult,_insert,single,empty;

reg [3:0] key0,key1;
reg [15:0] sw0,sw1;

//=======================================================
//  Structural coding
//=======================================================

always @(posedge CLOCK_50) begin
	key0 <= ~KEY;
	sw0 <= SW;
	key1 <= key0;
	sw1 <= sw0;
end

_edge_detector det0(_insert,CLOCK_50,key1[0]),det1(_add,CLOCK_50,key1[1]),det2(_mult,CLOCK_50,key1[2]);

stack stack0(empty,single,top_val,push,pop,write,inner,CLOCK_50,key1[3]);

assign LEDR[1] = empty;
assign LEDR[0] = single;

_final_state_machine mach(pop,write,push,inner,CLOCK_50,key1[3],top_val,sw1,_add,_mult,_insert,single,empty);

_HEX_screen s5(HEX5,top_val[12+:4]),s4(HEX4,top_val[8+:4]),s3(HEX3,top_val[4+:4]),
				s2(HEX2,top_val[0+:4]),s1(HEX1,sw1[4+:4]),s0(HEX0,sw1[0+:4]);


endmodule
